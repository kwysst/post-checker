
document.addEventListener('DOMContentLoaded', function () {
    feather.replace();

    // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
    const textInput = document.getElementById('textInput');
    const checkBtn = document.getElementById('checkBtn');
    const applyBtn = document.getElementById('applyBtn');
    const statusDiv = document.getElementById('status');

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    let currentProblems = {
        missingDot: [],
        lowercaseStart: [],
        noEmoji: false
    };

    // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    function checkText() {
        const text = textInput.value;

        resetState();
        currentProblems = {};
    
        validationRules.forEach(rule => {
            const result = rule.check(text);
            currentProblems[rule.id] = result;
        });

        console.log(currentProblems)
        
    
        applyBtn.classList.add('active')
        applyBtn.removeAttribute('disabled');
        updateStatus();
        highlightProblems();
    }

    function resetHighlight() {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        textInput.innerHTML = escapeHtml(textInput.textContent);
    }

    function resetState() {
        statusDiv.innerHTML = '';
        statusDiv.className = '';
        textInput.classList.remove('good', 'warning', 'bad');
        currentProblems = {};
    }

   
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    function mergeProblemRanges(problems) {
        if (problems.length === 0) return [];
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        const sorted = [...problems].sort((a, b) => a.start - b.start);
        const merged = [sorted[0]];
        
        for (let i = 1; i < sorted.length; i++) {
            const current = sorted[i];
            const last = merged[merged.length - 1];
            
            // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∏–ª–∏ —Å–æ–ø—Ä–∏–∫–∞—Å–∞–µ—Ç—Å—è —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º
            if (current.start <= last.end) {
                // –†–∞—Å—à–∏—Ä—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                last.end = Math.max(last.end, current.end);
                // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                if (current.message && !last.message.includes(current.message)) {
                    last.message += `; ${current.message}`;
                }
            } else {
                merged.push(current);
            }
        }
        
        return merged;
    }
    
  
    
    // –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML
    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    function updateStatus() {
        statusDiv.innerHTML = '';
        statusDiv.className = '';

        const problemsList = [];
        let autoFixableCount = 0;
        let unfixableCount = 0;

        // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª
        validationRules.forEach(rule => {
            const problems = currentProblems[rule.id];

            if (problems && (
                (Array.isArray(problems) && problems.length > 0) ||
                (typeof problems === 'object' && problems.problem) ||
                (typeof problems === 'boolean' && problems)
            )) {
                if (rule.fix) {
                    autoFixableCount++;
                } else {
                    unfixableCount++;
                }

                if (Array.isArray(problems) && problems.length > 0) {
                    problemsList.push(rule.name);
                } else if (problems.message) {
                    problemsList.push(problems.message);
                } else {
                    problemsList.push(rule.name);
                }
            }
        });

        if (problemsList.length === 0) {
            showSuccessStatus();
        } else if (autoFixableCount > 0 && unfixableCount === 0) {
            showWarningStatus('–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:', problemsList);
        } else if (autoFixableCount === 0 && unfixableCount > 0) {
            showWarningStatus('–¢–µ–∫—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã:', problemsList);
        } else {
            showErrorStatus('–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:', problemsList);
        }
    }

    function showSuccessStatus() {
        statusDiv.innerHTML = `
            <div style="text-align: center;">
                <div style="font-size: 32px; margin-bottom: 10px;">üéâ</div>
                <div style="font-size: 18px; font-weight: 600; margin-bottom: 8px;">–ò–¥–µ–∞–ª—å–Ω–æ!</div>
                <div>–¢–µ–∫—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º</div>
            </div>
        `;
        statusDiv.classList.add('status-good');
        textInput.classList.add('good');
    }

    function showWarningStatus(title, problems) {
        statusDiv.innerHTML = `
            <div style="font-size: 18px; font-weight: 600; margin-bottom: 15px;">${title}</div>
            <div class="problems-list">
                <ul>
                    ${problems.map(problem => `<li>${problem}</li>`).join('')}
                </ul>
            </div>
        `;
        statusDiv.classList.add('status-warning');
        textInput.classList.add('warning');
    }

    function showErrorStatus(title, problems) {
        statusDiv.innerHTML = `
            <div style="font-size: 18px; font-weight: 600; margin-bottom: 15px;">${title}</div>
            <div class="problems-list">
                <ul>
                    ${problems.map(problem => `<li>${problem}</li>`).join('')}
                </ul>
            </div>
        `;
        statusDiv.classList.add('status-bad');
        textInput.classList.add('bad');
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    checkBtn.addEventListener('click', checkText);
    applyBtn.addEventListener('click', applyFixes);

    checkBtn.addEventListener('click', () => document.getElementsByClassName("header")[0].style.display = 'none');
    applyBtn.addEventListener('click', () => document.getElementsByClassName("header")[0].style.display = 'none');

    // –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
    textInput.addEventListener('input', () => {
        resetState();
        statusDiv.innerHTML = '';
        statusDiv.className = '';
        applyBtn.classList.remove('active');
        applyBtn.setAttribute('disabled', 'true');
        textInput.classList.remove('good', 'warning', 'bad');
    });

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML (–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    const copyBtn = document.getElementById('copyBtn');

    copyBtn.addEventListener('click', () => {
        navigator.clipboard.writeText(textInput.value)
            .then(() => {
                copyBtn.querySelector('.copy-icon').style.display = 'none';
                copyBtn.querySelector('.check-icon').style.display = 'block';
                copyBtn.classList.toggle('checked');

                setTimeout(() => {
                    copyBtn.classList.toggle('checked');
                    copyBtn.querySelector('.copy-icon').style.display = 'block';
                    copyBtn.querySelector('.check-icon').style.display = 'none';
                }, 2000);
            });
    });













function highlightProblems() {
    const text = textInput.value;
    const overlay = document.getElementById('highlightOverlay');
    
    let newHtml = escapeHtml(text);
    const allProblems = [];
    
    Object.values(currentProblems).forEach(problems => {
        if (Array.isArray(problems)) {
            allProblems.push(...problems);
        }
    });
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –¥–∏–∞–ø–∞–∑–æ–Ω—ã
    const mergedProblems = mergeProblemRanges(allProblems);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –∫ –º–µ–Ω—å—à–µ–º—É)
    mergedProblems.sort((a, b) => b.start - a.start);
    console.log(mergedProblems, allProblems);
    mergedProblems.forEach(problem => {
        const before = newHtml.substring(0, problem.start);
        const errorText = newHtml.substring(problem.start, problem.end);
        const after = newHtml.substring(problem.end);
        
        newHtml = before + `<span class="highlight-error">${errorText}</span>` + after;
    });
    
    overlay.innerHTML = newHtml;
}

function applyFixes() {
    let text = textInput.value;
    
    validationRules.forEach(rule => {
        if (rule.fix && currentProblems[rule.id] && currentProblems[rule.id].length > 0) {
            text = rule.fix(text);
        }
    });
    
    textInput.value = text;
    checkText();
}

// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ –∏ —Ä–µ—Å–∞–π–∑–µ
textInput.addEventListener('scroll', () => {
    highlightOverlay.scrollTop = textInput.scrollTop;
});

textInput.addEventListener('input', () => {
    highlightOverlay.textContent = textInput.value;
});


});




