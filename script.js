
document.addEventListener('DOMContentLoaded', function () {
    feather.replace();

    // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
    const textInput = document.getElementById('textInput');
    const checkBtn = document.getElementById('checkBtn');
    const applyBtn = document.getElementById('applyBtn');
    const statusDiv = document.getElementById('status');

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    let currentProblems = {
        missingDot: [],
        lowercaseStart: [],
        noEmoji: false
    };

    // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    function checkText() {
        const text = textInput.value;
        resetState();

        currentProblems = {};

        validationRules.forEach(rule => {
            const result = rule.check(text);
            currentProblems[rule.id] = result;
        });

        applyBtn.classList.add('active')
        applyBtn.removeAttribute('disabled');
        updateStatus();
    }

    function resetState() {
        statusDiv.innerHTML = '';
        statusDiv.className = '';
        textInput.classList.remove('good', 'warning', 'bad');
        currentProblems = {};
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø—Ä–æ–±–ª–µ–º
    function highlightProblems() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å div —Å contenteditable
        // –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Å–≤–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        console.log('–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:', currentProblems);
    }

    // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    function applyFixes() {
        let text = textInput.value;

        validationRules.forEach(rule => {
            if (rule.fix && currentProblems[rule.id] && currentProblems[rule.id].length > 0) {
                text = rule.fix(text);
            }
        });

        textInput.value = text;
        checkText();
    }
    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    function updateStatus() {
        statusDiv.innerHTML = '';
        statusDiv.className = '';

        const problemsList = [];
        let autoFixableCount = 0;
        let unfixableCount = 0;

        // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª
        validationRules.forEach(rule => {
            const problems = currentProblems[rule.id];

            if (problems && (
                (Array.isArray(problems) && problems.length > 0) ||
                (typeof problems === 'object' && problems.problem) ||
                (typeof problems === 'boolean' && problems)
            )) {
                if (rule.fix) {
                    autoFixableCount++;
                } else {
                    unfixableCount++;
                }

                if (Array.isArray(problems) && problems.length > 0) {
                    problemsList.push(rule.name);
                } else if (problems.message) {
                    problemsList.push(problems.message);
                } else {
                    problemsList.push(rule.name);
                }
            }
        });

        if (problemsList.length === 0) {
            showSuccessStatus();
        } else if (autoFixableCount > 0 && unfixableCount === 0) {
            showWarningStatus('–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:', problemsList);
        } else if (autoFixableCount === 0 && unfixableCount > 0) {
            showWarningStatus('–¢–µ–∫—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã:', problemsList);
        } else {
            showErrorStatus('–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:', problemsList);
        }
    }

    function showSuccessStatus() {
        statusDiv.innerHTML = `
            <div style="text-align: center;">
                <div style="font-size: 32px; margin-bottom: 10px;">üéâ</div>
                <div style="font-size: 18px; font-weight: 600; margin-bottom: 8px;">–ò–¥–µ–∞–ª—å–Ω–æ!</div>
                <div>–¢–µ–∫—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º</div>
            </div>
        `;
        statusDiv.classList.add('status-good');
        textInput.classList.add('good');
    }
    
    function showWarningStatus(title, problems) {
        statusDiv.innerHTML = `
            <div style="font-size: 18px; font-weight: 600; margin-bottom: 15px;">${title}</div>
            <div class="problems-list">
                <ul>
                    ${problems.map(problem => `<li>${problem}</li>`).join('')}
                </ul>
            </div>
        `;
        statusDiv.classList.add('status-warning');
        textInput.classList.add('warning');
    }
    
    function showErrorStatus(title, problems) {
        statusDiv.innerHTML = `
            <div style="font-size: 18px; font-weight: 600; margin-bottom: 15px;">${title}</div>
            <div class="problems-list">
                <ul>
                    ${problems.map(problem => `<li>${problem}</li>`).join('')}
                </ul>
            </div>
        `;
        statusDiv.classList.add('status-bad');
        textInput.classList.add('bad');
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    checkBtn.addEventListener('click', checkText);
    applyBtn.addEventListener('click', applyFixes);

    // –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
    textInput.addEventListener('input', () => {
        resetState();
        statusDiv.innerHTML = '';
        statusDiv.className = '';
        applyBtn.classList.remove('active');
        applyBtn.setAttribute('disabled', 'true');
        textInput.classList.remove('good', 'warning', 'bad');
    });

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML (–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    const copyBtn = document.getElementById('copyBtn');

    copyBtn.addEventListener('click', () => {
        navigator.clipboard.writeText(textInput.value)
            .then(() => {
                copyBtn.querySelector('.copy-icon').style.display = 'none';
                copyBtn.querySelector('.check-icon').style.display = 'block';
                copyBtn.classList.toggle('checked');

                setTimeout(() => {
                    copyBtn.classList.toggle('checked');
                    copyBtn.querySelector('.copy-icon').style.display = 'block';
                    copyBtn.querySelector('.check-icon').style.display = 'none';
                }, 2000);
            });
    });


});