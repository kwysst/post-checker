// –ú–∞—Å—Å–∏–≤ –ø—Ä–∞–≤–∏–ª
// üòù —Ç–µ–∫—Å—Ç. 
// üòù —Ç–µ–∫—Å—Ç 2123
// —Ç–µ–∫—Å—Ç–∏–∫

const validationRules = [
    {
        id: 'missingDot',
        name: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ –∞–±–∑–∞—Ü–µ–≤',
        check: (text) => {
            const problems = [];
            const paragraphs = text.split('\n');
            let charIndex = 0;
        
            paragraphs.forEach(paragraph => {
                if (paragraph.trim() === '') {
                    charIndex += 1;
                    return;
                }
        
                const lastChar = paragraph[paragraph.length - 1];
                const endsWithLetter = /[a-zA-Z–∞-—è–ê-–Ø0-9]$/.test(lastChar);

                if (endsWithLetter) {
                    problems.push({
                        start: charIndex + paragraph.length - 1,
                        end: charIndex + paragraph.length,
                        message: '–ê–±–∑–∞—Ü –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –±—É–∫–≤–æ–π - –¥–æ–±–∞–≤—å—Ç–µ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é –∏–ª–∏ —ç–º–æ–¥–∑–∏'
                    });
                }
        
                charIndex += paragraph.length + 1;
            });
        
            return problems;
        },
        fix: (text) => {
            return text.split('\n').map(paragraph => {
                if (paragraph.trim() === '') return paragraph;
                
                const lastChar = paragraph[paragraph.length - 1];
                const endsWithLetter = /[a-zA-Z–∞-—è–ê-–Ø0-9]$/.test(lastChar);
                
                if (endsWithLetter)
                    return paragraph + '.';
                return paragraph;
            }).join('\n');
        }
    }
    // lowercaseStart –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã
    , {
        id: 'lowercaseStart', 
        name: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã',
        check: (text) => {
            const problems = [];
            const paragraphs = text.split('\n');
            let charIndex = 0;
    
            paragraphs.forEach(paragraph => {
                if (paragraph.trim() === '') {
                    charIndex += 1;
                    return;
                }
    
                // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –≤ –∞–±–∑–∞—Ü–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É—è —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ)
                const firstLetterMatch = paragraph.match(/[a-zA-Z–∞-—è–ê-–Ø]/);
                if (firstLetterMatch) {
                    const firstLetterIndex = firstLetterMatch.index;
                    const firstLetter = firstLetterMatch[0];
                    
                    if (/[a-z–∞-—è]/.test(firstLetter)) {
                        problems.push({
                            start: charIndex + firstLetterIndex,
                            end: charIndex + firstLetterIndex + 1,
                            message: '–ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∞–±–∑–∞—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥–ª–∞–≤–Ω–æ–π'
                        });
                    }
                }
    
                charIndex += paragraph.length + 1;
            });
    
            return problems;
        },
        fix: (text) => {
            return text.split('\n').map(paragraph => {
                if (paragraph.trim() === '') return paragraph;
                
                // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∏ –¥–µ–ª–∞–µ–º –µ—ë –∑–∞–≥–ª–∞–≤–Ω–æ–π (–∏–≥–Ω–æ—Ä–∏—Ä—É—è // –∏ –¥—Ä—É–≥–∏–µ –Ω–µ-–±—É–∫–≤—ã –≤ –Ω–∞—á–∞–ª–µ)
                return paragraph.replace(/^([^a-zA-Z–∞-—è–ê-–Ø]*)([a-z–∞-—è])/u, (match, prefix, letter) => {
                    return prefix + letter.toUpperCase();
                });
            }).join('\n');
        }
    }
    // noEmoji –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–º–∞–π–ª–∏–∫–∏
    , {
        id: 'noEmoji',
        name: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–º–∞–π–ª–∏–∫–∏',
        check: (text) => {
            const emojiRegex = /\p{Emoji_Presentation}/u;
            return !emojiRegex.test(text);
        },
        fix: null // –ù–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    }
    // emojiRatio –ú–∞–ª–æ —Å–º–∞–π–ª–∏–∫–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
    , {
        id: 'emojiRatio',
        name: '–ú–∞–ª–æ —Å–º–∞–π–ª–∏–∫–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ',
        check: (text) => {
            const emojiRegex = /\p{Emoji_Presentation}/gu;
            const emojis = text.match(emojiRegex) || [];
            const textWithoutEmojis = text.replace(emojiRegex, '');
            const textLength = textWithoutEmojis.replace(/\s/g, '').length; // –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —ç–º–æ–¥–∑–∏
            
            // –•–æ—Ç–∏–º 1 —Å–º–∞–π–ª–∏–∫ –Ω–∞ –∫–∞–∂–¥—ã–µ 150 —Å–∏–º–≤–æ–ª–æ–≤
            const requiredEmojis = Math.ceil(textLength / 150);
            const currentEmojis = emojis.length;
            
            if (currentEmojis < requiredEmojis) {
                return {
                    problem: true,
                    message: `–î–æ–±–∞–≤—å—Ç–µ –µ—â—ë ${requiredEmojis - currentEmojis} —Å–º–∞–π–ª–∏–∫–æ–≤ (—Å–µ–π—á–∞—Å ${currentEmojis}, –Ω—É–∂–Ω–æ ${requiredEmojis})`
                };
            }
            
            return { problem: false };
        },
        fix: null // –ù–µ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    }
   // emojiAtStart –°–º–∞–π–ª–∏–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∞–±–∑–∞—Ü–∞
    , {
        id: 'emojiAtStart',
        name: '–°–º–∞–π–ª–∏–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∞–±–∑–∞—Ü–∞',
        check: (text) => {
            const problems = [];
            const paragraphs = text.split('\n');
            let charIndex = 0;
    
            // –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—ã –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö –∞–±–∑–∞—Ü–µ–≤ —Å —ç–º–æ–¥–∑–∏
            const emojiGroups = [];
            let currentGroup = [];
            
            paragraphs.forEach((paragraph, index) => {
                const trimmed = paragraph.trim();
                if (trimmed) {
                    const firstSymbol = Array.from(trimmed)[0];
                    const isEmojiAtStart = /\p{Emoji_Presentation}/u.test(firstSymbol);
                    
                    if (isEmojiAtStart) {
                        currentGroup.push(index);
                    } else {
                        if (currentGroup.length > 1) {
                            emojiGroups.push([...currentGroup]);
                        }
                        currentGroup = [];
                    }
                } else {
                    if (currentGroup.length > 1) {
                        emojiGroups.push([...currentGroup]);
                    }
                    currentGroup = [];
                }
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
            if (currentGroup.length > 1) {
                emojiGroups.push([...currentGroup]);
            }
    
            paragraphs.forEach((paragraph, index) => {
                const trimmed = paragraph.trim();
                if (trimmed === '') {
                    charIndex += 1;
                    return;
                }
    
                const firstSymbol = Array.from(trimmed)[0];
                const isEmojiAtStart = /\p{Emoji_Presentation}/u.test(firstSymbol);
                
                // –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –≥—Ä—É–ø–ø—ã –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö —ç–º–æ–¥–∑–∏-–∞–±–∑–∞—Ü–µ–≤
                const isList = emojiGroups.some(group => group.includes(index));
                
                if (isEmojiAtStart && !isList) {
                    const emojiIndex = paragraph.indexOf(firstSymbol);
                    problems.push({
                        start: charIndex + emojiIndex,
                        end: charIndex + emojiIndex + firstSymbol.length,
                        message: '–£–±–µ—Ä–∏—Ç–µ —Å–º–∞–π–ª–∏–∫ –∏–∑ –Ω–∞—á–∞–ª–∞ –∞–±–∑–∞—Ü–∞'
                    });
                }
    
                charIndex += paragraph.length + 1;
            });
    
            return problems;
        },
        fix: (text) => {
            const paragraphs = text.split('\n');
            
            // –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—ã –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö —ç–º–æ–¥–∑–∏-–∞–±–∑–∞—Ü–µ–≤ –¥–ª—è —Ñ–∏–∫—Å–∞
            const emojiGroups = [];
            let currentGroup = [];
            
            paragraphs.forEach((paragraph, index) => {
                const trimmed = paragraph.trim();
                if (trimmed) {
                    const firstSymbol = Array.from(trimmed)[0];
                    const isEmojiAtStart = /\p{Emoji_Presentation}/u.test(firstSymbol);
                    
                    if (isEmojiAtStart) {
                        currentGroup.push(index);
                    } else {
                        if (currentGroup.length > 1) {
                            emojiGroups.push([...currentGroup]);
                        }
                        currentGroup = [];
                    }
                } else {
                    if (currentGroup.length > 1) {
                        emojiGroups.push([...currentGroup]);
                    }
                    currentGroup = [];
                }
            });
            
            if (currentGroup.length > 1) {
                emojiGroups.push([...currentGroup]);
            }
    
            return paragraphs.map((paragraph, index) => {
                const trimmed = paragraph.trim();
                if (trimmed === '') return paragraph;
                
                const firstSymbol = Array.from(trimmed)[0];
                const isEmojiAtStart = /\p{Emoji_Presentation}/u.test(firstSymbol);
                const isList = emojiGroups.some(group => group.includes(index));
                
                if (isEmojiAtStart && !isList) {
                    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —ç–º–æ–¥–∑–∏ –¥–ª—è regex
                    const escapedSymbol = firstSymbol.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
                    return paragraph.replace(new RegExp(`^\\s*${escapedSymbol}`), '').trim();
                }
                
                return paragraph;
            }).join('\n');
        }
    }
    // emojiSpacing –≠–º–æ–¥–∑–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–¥–µ–ª–µ–Ω—ã –ø—Ä–æ–±–µ–ª–∞–º–∏ –æ—Ç —Ç–µ–∫—Å—Ç–∞
    , {
        id: 'emojiSpacing',
        name: '–≠–º–æ–¥–∑–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–¥–µ–ª–µ–Ω—ã –ø—Ä–æ–±–µ–ª–∞–º–∏ –æ—Ç —Ç–µ–∫—Å—Ç–∞',
        check: (text) => {
            const problems = [];
            const emojiRegex = /\p{Emoji_Presentation}/gu;
            let match;
            
            while ((match = emojiRegex.exec(text)) !== null) {
                const emoji = match[0];
                const index = match.index;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ–¥ —ç–º–æ–¥–∑–∏
                const charBefore = text[index - 1];
                const hasTextBefore = charBefore && /\S/.test(charBefore);
                const needsSpaceBefore = hasTextBefore && charBefore !== ' ' && charBefore !== '\n';
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–≤–æ–ª –ø–æ—Å–ª–µ —ç–º–æ–¥–∑–∏
                const charAfter = text[index + emoji.length];
                const hasTextAfter = charAfter && /\S/.test(charAfter);
                const needsSpaceAfter = hasTextAfter && charAfter !== ' ' && charAfter !== '\n';
                
                if (needsSpaceBefore || needsSpaceAfter) {
                    problems.push({
                        start: index,
                        end: index + emoji.length,
                        message: `–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ —ç–º–æ–¥–∑–∏`
                    });
                }
            }
            
            return problems;
        },
        fix: (text) => {
            const emojiRegex = /\p{Emoji_Presentation}/gu;
            
            return text.replace(emojiRegex, (emoji, index) => {
                const charBefore = text[index - 1];
                const charAfter = text[index + emoji.length];
                
                const hasTextBefore = charBefore && /\S/.test(charBefore);
                const needsSpaceBefore = hasTextBefore && charBefore !== ' ' && charBefore !== '\n';
                
                const hasTextAfter = charAfter && /\S/.test(charAfter);
                const needsSpaceAfter = hasTextAfter && charAfter !== ' ' && charAfter !== '\n';
                
                let result = emoji;
                if (needsSpaceBefore) result = ' ' + result;
                if (needsSpaceAfter) result = result + ' ';
                
                return result;
            });
        }
    }

];